[{"html":"<h3 id=\"overview\">Overview</h3>\n<p>Rollup is a module bundler for JavaScript which compiles small pieces of code into something larger and more complex, such as a library or application. It uses the new standardized format for code modules included in the ES6 revision of JavaScript, instead of previous idiosyncratic solutions such as CommonJS and AMD.</p>\n<h3 id=\"quick-start-guide\">Quick Start Guide</h3>\n<p>Install with <code>npm install --global rollup</code>. Rollup can be used either through a <a href=\"https://github.com/rollup/rollup/wiki/Command-Line-Interface\">command line interface</a> with an optional configuration file, or else through its <a href=\"https://github.com/rollup/rollup/wiki/JavaScript-API\">JavaScript API</a>. Run <code>rollup --help</code> to see the available options and parameters. The <a href=\"https://github.com/rollup/rollup-starter-project\">starter project template</a> demonstrates common configuration options, and more detailed instructions are available throughout this user guide.</p>\n<h4 id=\"commands\">Commands</h4>\n<p>These commands assume the entry point to your application is named main.js, and that you&#39;d like all imports compiled into a single file named bundle.js.</p>\n<p>For browsers:</p>\n<pre><code><span class=\"hljs-comment\"># compile to a &lt;script&gt; containing a self-executing function</span>\n$ rollup main.js --format iife --output bundle.js\n</code></pre>\n<p>For Node.js:</p>\n<pre><code><span class=\"hljs-comment\"># compile to a CommonJS module</span>\n$ rollup main.js --format cjs --output bundle.js\n</code></pre>\n<p>For both browsers and Node.js:</p>\n<pre><code><span class=\"hljs-comment\"># UMD format requires a bundle name</span>\n$ rollup main.js --format umd --name <span class=\"hljs-string\">\"myBundle\"</span> --output bundle.js\n</code></pre>\n<h3 id=\"why\">Why</h3>\n<p>Developing software is usually easier if you break your project into smaller separate pieces, since that often removes unexpected interactions and dramatically reduces the complexity of the problems you&#39;ll need to solve, and simply writing smaller projects in the first place <a href=\"https://medium.com/@Rich_Harris/small-modules-it-s-not-quite-that-simple-3ca532d65de4\">isn&#39;t necessarily the answer</a>. Unfortunately, JavaScript has not historically included this capability as a core feature in the language.</p>\n<p>This finally changed with the ES6 revision of JavaScript, which includes a syntax for importing and exporting functions and data so they can be shared between separate scripts. The specification is now fixed, but it is not yet implemented in browsers or Node.js. Rollup allows you to write your code using the new module system, and will then compile it back down to existing supported formats such as CommonJS modules, AMD modules, and IIFE-style scripts. This means that you get to <em>write future-proof code</em>, and you also get the tremendous benefits of...</p>\n<h3 id=\"tree-shaking\">Tree Shaking</h3>\n<p>In addition to enabling the use of ES6 modules, Rollup also statically analyzes the code you are importing, and will exclude anything that isn&#39;t actually used. This allows you to build on top of existing tools and modules without adding extra dependencies or bloating the size of your project.</p>\n<p>For example, with CommonJS, the <em>entire tool or library must be imported</em>.</p>\n<pre><code><span class=\"hljs-comment\">// import the entire utils object with CommonJS</span>\n<span class=\"hljs-keyword\">var</span> utils = <span class=\"hljs-built_in\">require</span>( <span class=\"hljs-string\">'utils'</span> );\n<span class=\"hljs-keyword\">var</span> query = <span class=\"hljs-string\">'Rollup'</span>;\n<span class=\"hljs-comment\">// use the ajax method of the utils object</span>\nutils.ajax( <span class=\"hljs-string\">'https://api.example.com?search='</span> + query ).then( handleResponse );\n</code></pre>\n<p>But with ES6 modules, instead of importing the whole <code>utils</code> object, we can just import the one <code>ajax</code> function we need:</p>\n<pre><code><span class=\"hljs-comment\">// import the ajax function with an ES6 import statement</span>\n<span class=\"hljs-keyword\">import</span> { ajax } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'utils'</span>;\n<span class=\"hljs-keyword\">var</span> query = <span class=\"hljs-string\">'Rollup'</span>;\n<span class=\"hljs-comment\">// call the ajax function</span>\najax( <span class=\"hljs-string\">'https://api.example.com?search='</span> + query ).then( handleResponse );\n</code></pre>\n<p>Because Rollup includes the bare minimum, it results in lighter, faster, and less complicated libraries and applications. Since this approach is based on explicit <code>import</code> and <code>export</code> statements, it is vastly more effective than simply running an automated minifier to detect unused variables in the compiled output code.</p>\n<p>ES6 modules let you freely and seamlessly combine the most useful individual functions from your favorite libraries, without weighing down your project with all the other unused code. This will eventually be possible natively, but Rollup lets you do it today.</p>\n<h3 id=\"compatibility\">Compatibility</h3>\n<h4 id=\"importing-commonjs\">Importing CommonJS</h4>\n<p>Rollup can import existing CommonJS modules <a href=\"https://github.com/rollup/rollup-plugin-commonjs\">through a plugin</a>.</p>\n<h4 id=\"publishing-es6-modules\">Publishing ES6 Modules</h4>\n<p>To make sure your ES6 modules are immediately usable by tools that work with CommonJS such as Node.js and webpack, you can use Rollup to compile to UMD or CommonJS format, and then point to that compiled version with the <code>main</code> property in your <code>package.json</code> file. If your <code>package.json</code> file also has a <code>module</code> field, ES6-aware tools like Rollup and <a href=\"https://webpack.js.org/\">webpack 2</a> will <a href=\"https://github.com/rollup/rollup/wiki/pkg.module\">import the ES6 module version</a> directly.</p>\n<h3 id=\"links\">Links</h3>\n<ul>\n<li>step-by-step <a href=\"https://code.lengstorf.com/learn-rollup-js/\">tutorial video series</a>, with accompanying written walkthrough</li>\n<li>miscellaneous issues in the <a href=\"https://github.com/rollup/rollup/wiki\">wiki</a></li>\n</ul>\n","metadata":{"title":"Introduction"},"subsections":[{"slug":"overview","title":"Overview"},{"slug":"quick-start-guide","title":"Quick Start Guide"},{"slug":"why","title":"Why"},{"slug":"tree-shaking","title":"Tree Shaking"},{"slug":"compatibility","title":"Compatibility"},{"slug":"links","title":"Links"}],"slug":"introduction"},{"html":"<p><em>Before we begin, you&#39;ll need to have <a href=\"https://nodejs.org\">Node.js</a> installed so that you can use <a href=\"https://npmjs.com\">npm</a>. You&#39;ll also need to know how to access the <a href=\"https://www.codecademy.com/learn/learn-the-command-line\">command line</a> on your machine.</em></p>\n<p>The easiest way to use Rollup is via the Command Line Interface (or CLI). For now, we&#39;ll install it globally (later on we&#39;ll learn how to install it locally to your project so that your build process is portable, but don&#39;t worry about that yet). Type this into the command line:</p>\n<pre><code>npm install rollup --global <span class=\"hljs-comment\"># or `npm i rollup -g` for short</span>\n</code></pre>\n<p>You can now run the <code>rollup</code> command. Try it!</p>\n<pre><code>rollup\n</code></pre>\n<p>Because no arguments were passed, Rollup prints usage instructions. This is the same as running <code>rollup --help</code>, or <code>rollup -h</code>.</p>\n<p>Let&#39;s create a simple project:</p>\n<pre><code>mkdir -p my-rollup-project/src\n<span class=\"hljs-built_in\">cd</span> my-rollup-project\n</code></pre>\n<p>First, we need an <em>entry point</em>. Paste this into a new file called <code>src/main.js</code>:</p>\n<pre><code><span class=\"hljs-comment\">// src/main.js</span>\n<span class=\"hljs-keyword\">import</span> foo <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./foo.js'</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(foo);\n}\n</code></pre>\n<p>Then, let&#39;s create the <code>foo.js</code> module that our entry point imports:</p>\n<pre><code><span class=\"hljs-comment\">// src/foo.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">'hello world!'</span>;\n</code></pre>\n<p>Now we&#39;re ready to create a bundle:</p>\n<pre><code>rollup src/main.js --format cjs\n</code></pre>\n<p>The <code>--format</code> option specifies what kind of bundle we&#39;re creating — in this case, CommonJS (which will run in Node.js). Because we didn&#39;t specify an output file, it will be printed straight to <code>stdout</code>:</p>\n<pre><code><span class=\"hljs-meta\">'use strict'</span>;\n\n<span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-string\">'hello world!'</span>;\n\n<span class=\"hljs-keyword\">var</span> main = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(foo);\n};\n\n<span class=\"hljs-built_in\">module</span>.exports = main;\n</code></pre>\n<p>You can save the bundle as a file like so:</p>\n<pre><code>rollup src/main.js --format cjs --output bundle.js\n<span class=\"hljs-comment\"># or `rollup main.js -f cjs -o bundle.js`</span>\n</code></pre>\n<p>(You could also do <code>rollup src/main.js &gt; bundle.js</code>, but as we&#39;ll see later, this is less flexible if you&#39;re generating sourcemaps.)</p>\n<p>Try running the code:</p>\n<pre><code>node\n&gt; var myBundle = require(<span class=\"hljs-string\">'./bundle.js'</span>);\n&gt; myBundle();\n<span class=\"hljs-string\">'hello world!'</span>\n</code></pre>\n<p>Congratulations! You&#39;ve created your first bundle with Rollup.</p>\n","metadata":{"title":"Creating your first bundle"},"subsections":[],"slug":"creating-your-first-bundle"},{"html":"<p>So far, so good, but as we start adding more options it becomes a bit of a nuisance to type out the command.</p>\n<p>To save repeating ourselves, we can create a config file containing all the options we need. A config file is written in JavaScript and is more flexible than the raw CLI.</p>\n<p>Create a file in the project root called <code>rollup.config.js</code>, and add the following code:</p>\n<pre><code><span class=\"hljs-comment\">// rollup.config.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">'src/main.js'</span>,\n  <span class=\"hljs-attr\">format</span>: <span class=\"hljs-string\">'cjs'</span>,\n  <span class=\"hljs-attr\">dest</span>: <span class=\"hljs-string\">'bundle.js'</span> <span class=\"hljs-comment\">// equivalent to --output</span>\n};\n</code></pre>\n<p>To use the config file, we use the <code>--config</code> or <code>-c</code> flag:</p>\n<pre><code>rm bundle.js <span class=\"hljs-comment\"># so we can check the command works!</span>\nrollup -c\n</code></pre>\n<p>You can override any of the options in the config file with the equivalent command line options:</p>\n<pre><code>rollup -c -o bundle-2.js <span class=\"hljs-comment\"># --output is equivalent to dest</span>\n</code></pre>\n<p>(Note that Rollup itself processes the config file, which is why we&#39;re able to use <code>export default</code> syntax – the code isn&#39;t being transpiled with Babel or anything similar, so you can only use ES2015 features that are supported in the version of Node.js that you&#39;re running.)</p>\n<p>You can, if you like, specify a different config file from the default <code>rollup.config.js</code>:</p>\n<pre><code>rollup --config rollup.config.dev.js\nrollup --config rollup.config.prod.js\n</code></pre>\n","metadata":{"title":"Using config files"},"subsections":[],"slug":"using-config-files"},{"html":"<p>Lots of JavaScript projects follow a simple convention: typing <code>npm run build</code> executes whatever build system the project uses. This is helpful because it means that someone who wants to help contribute to your project can dive right into the source code without knowing anything about the plumbing that ties it together (be that Rollup, or Webpack, or Gulp, or something more esoteric). They don&#39;t even need to install it globally like we did in the first section.</p>\n<p>Setting up your own <code>npm run build</code> script is nice and straightforward.</p>\n<h3 id=\"creating-a-package-json-file\">Creating a package.json file</h3>\n<p>A package.json file contains important information about your project, including its name, version, license and dependencies. (In fact, you can&#39;t publish a package to npm without a package.json — but you should still have one if you&#39;re building an application rather than a library.)</p>\n<p>The easiest way to create one is by running <code>npm init</code> inside the project folder and following the prompts.</p>\n<p>Open the package.json and find (or create) the <code>scripts</code> section, and add a <code>build</code> entry:</p>\n<pre><code>{\n  ...,\n  <span class=\"hljs-string\">\"scripts\"</span>: {\n    <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,\n    <span class=\"hljs-string\">\"build\"</span>: <span class=\"hljs-string\">\"rollup -c\"</span>\n  },\n  ...\n}\n</code></pre>\n<p>(This assumes you&#39;ve got a <code>rollup.config.js</code> file in your project folder.)</p>\n<h3 id=\"installing-rollup-locally\">Installing Rollup locally</h3>\n<p>Up till now we&#39;ve been using a global installation of Rollup. It&#39;s much better to use a <em>local</em> installation, because then anyone cloning your project and running <code>npm install</code> will get a compatible version.</p>\n<p>Run the following command...</p>\n<pre><code>npm install --save-dev rollup <span class=\"hljs-comment\"># or `npm i -D rollup`</span>\n</code></pre>\n<p>...and notice that a <code>devDependencies</code> section has been added to your package.json:</p>\n<pre><code>{\n  ...,\n  <span class=\"hljs-string\">\"devDependencies\"</span>: {\n    <span class=\"hljs-string\">\"rollup\"</span>: <span class=\"hljs-string\">\"^0.41.4\"</span>\n  },\n  ...\n}\n</code></pre>\n<p>All of your <code>npm run</code> scripts will look for locally installed versions of commands like <code>rollup</code> if they exist.</p>\n<p>Try running the script:</p>\n<pre><code>npm run build\n</code></pre>\n<h3 id=\"rebuilding-when-files-change-with-npm-run-dev-\">Rebuilding when files change with <code>npm run dev</code></h3>\n<p>By installing <a href=\"https://github.com/rollup/rollup-watch\">rollup-watch</a>, you can create a script that automatically rebuilds your bundle whenever its source files change:</p>\n<pre><code>npm install --save-dev rollup-watch\n</code></pre>\n<pre><code>{\n  ...,\n  <span class=\"hljs-string\">\"scripts\"</span>: {\n    <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,\n    <span class=\"hljs-string\">\"build\"</span>: <span class=\"hljs-string\">\"rollup -c\"</span>,\n    <span class=\"hljs-string\">\"dev\"</span>: <span class=\"hljs-string\">\"rollup -c -w\"</span>\n  },\n  ...\n}\n</code></pre>\n<p>The command <code>rollup -c -w</code> (short for <code>rollup --config --watch</code>) runs Rollup in watch mode.</p>\n","metadata":{"title":"npm run build"},"subsections":[{"slug":"creating-a-package-json-file","title":"Creating a package.json"},{"slug":"installing-rollup-locally","title":"Installing Rollup locally"},{"slug":"rebuilding-when-files-change-with-npm-run-dev-","title":"Rebuilding when files change with npm run dev"}],"slug":"npm-run-build"},{"html":"<p>So far, we&#39;ve created a simple bundle from an entry point and a module imported via a relative path. As you build more complex bundles, you&#39;ll often need more flexibility – importing modules installed with npm, compiling code with Babel, working with JSON files and so on.</p>\n<p>For that, we use <em>plugins</em>, which change the behaviour of Rollup at key points in the bundling process. A list of available plugins is maintained on <a href=\"https://github.com/rollup/rollup/wiki/Plugins\">the Rollup wiki</a>.</p>\n<h3 id=\"using-plugins\">Using plugins</h3>\n<p>For this tutorial, we&#39;ll use <a href=\"https://github.com/rollup/rollup-plugin-json\">rollup-plugin-json</a>, which allows Rollup to import data from a JSON file.</p>\n<p>Install rollup-plugin-json as a development dependency:</p>\n<pre><code>npm install --save-dev rollup-plugin-json\n</code></pre>\n<p>(We&#39;re using <code>--save-dev</code> rather than <code>--save</code> because our code doesn&#39;t actually depend on the plugin when it runs – only when we&#39;re building the bundle.)</p>\n<p>Update your <code>src/main.js</code> file so that it imports from your package.json instead of <code>src/foo.js</code>:</p>\n<pre><code><span class=\"hljs-comment\">// src/main.js</span>\n<span class=\"hljs-keyword\">import</span> { version } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../package.json'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'version '</span> + version);\n}\n</code></pre>\n<p>Edit your <code>rollup.config.js</code> file to include the JSON plugin:</p>\n<pre><code><span class=\"hljs-comment\">// rollup.config.js</span>\n<span class=\"hljs-keyword\">import</span> json <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rollup-plugin-json'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">'src/main.js'</span>,\n  <span class=\"hljs-attr\">format</span>: <span class=\"hljs-string\">'cjs'</span>,\n  <span class=\"hljs-attr\">plugins</span>: [ json() ],\n  <span class=\"hljs-attr\">dest</span>: <span class=\"hljs-string\">'bundle.js'</span>\n};\n</code></pre>\n<p>Run Rollup with <code>npm run build</code>. The result should look like this:</p>\n<pre><code><span class=\"hljs-meta\">'use strict'</span>;\n\n<span class=\"hljs-keyword\">var</span> version = <span class=\"hljs-string\">\"1.0.0\"</span>;\n\n<span class=\"hljs-keyword\">var</span> main = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'version '</span> + version);\n};\n\n<span class=\"hljs-built_in\">module</span>.exports = main;\n</code></pre>\n<p>(Notice that only the data we actually need gets imported – <code>name</code> and <code>devDependencies</code> and other parts of <code>package.json</code> are ignored. That&#39;s <a href=\"#what-is-tree-shaking-\">tree-shaking</a> in action!)</p>\n","metadata":{"title":"Getting started with plugins"},"subsections":[{"slug":"using-plugins","title":"Using plugins"}],"slug":"getting-started-with-plugins"},{"html":"<p>At some point, it&#39;s very likely that your project will depend on packages installed from npm into your <code>node_modules</code> folder. Unlike other bundlers like Webpack and Browserify, Rollup doesn&#39;t know &#39;out of the box&#39; how to handle these dependencies - we need to add some configuration.</p>\n<p>Let&#39;s add a simple dependency called <a href=\"https://www.npmjs.com/package/the-answer\">the-answer</a>, which exports the answer to the question of life, the universe and everything:</p>\n<pre><code>npm install --save the-answer <span class=\"hljs-comment\"># or `npm i -S the-answer`</span>\n</code></pre>\n<p>Notice that we used <code>--save</code> this time, so that it&#39;s stored in the <code>dependencies</code> section of package.json.</p>\n<p>If we update our <code>src/main.js</code> file...</p>\n<pre><code><span class=\"hljs-comment\">// src/main.js</span>\n<span class=\"hljs-keyword\">import</span> answer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'the-answer'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'the answer is '</span> + answer);\n}\n</code></pre>\n<p>...and run Rollup...</p>\n<pre><code>npm run build\n</code></pre>\n<p>...we&#39;ll see a warning like this:</p>\n<pre><code>⚠️ <span class=\"hljs-string\">'the-answer'</span> is imported by src/main.js, but could not be resolved – treating it as an external dependency\n</code></pre>\n<p>The resulting <code>bundle.js</code> will still work in Node.js, because the <code>import</code> declaration gets turned into a CommonJS <code>require</code> statement, but <code>the-answer</code> does <em>not</em> get included in the bundle. For that, we need a plugin.</p>\n<h3 id=\"rollup-plugin-node-resolve\">rollup-plugin-node-resolve</h3>\n<p>The <a href=\"https://github.com/rollup/rollup-plugin-node-resolve\">rollup-plugin-node-resolve</a> plugin teaches Rollup how to find external modules. Install it...</p>\n<pre><code>npm install --save-dev rollup-plugin-node-resolve\n</code></pre>\n<p>...and add it to your config file:</p>\n<pre><code><span class=\"hljs-comment\">// rollup.config.js</span>\n<span class=\"hljs-keyword\">import</span> resolve <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rollup-plugin-node-resolve'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">'src/main.js'</span>,\n  <span class=\"hljs-attr\">format</span>: <span class=\"hljs-string\">'cjs'</span>,\n  <span class=\"hljs-attr\">plugins</span>: [ resolve() ],\n  <span class=\"hljs-attr\">dest</span>: <span class=\"hljs-string\">'bundle.js'</span>\n};\n</code></pre>\n<p>This time, when you <code>npm run build</code>, no warning is emitted — the bundle contains the imported module.</p>\n<h3 id=\"rollup-plugin-commonjs\">rollup-plugin-commonjs</h3>\n<p>Some libraries expose ES6 modules that you can import as-is — <code>the-answer</code> is one such module. But at the moment, the majority of packages on npm are exposed as CommonJS modules instead. Until that changes, we need to convert CommonJS to ES2015 before Rollup can process them.</p>\n<p>The <a href=\"https://github.com/rollup/rollup-plugin-commonjs\">rollup-plugin-commonjs</a> plugin does exactly that.</p>\n<p>Note that <code>rollup-plugin-commonjs</code> should go <em>before</em> other plugins that transform your modules — this is to prevent other plugins from making changes that break the CommonJS detection.</p>\n<h2 id=\"peer-dependencies\">Peer dependencies</h2>\n<p>Let&#39;s say that you&#39;re building a library that has a peer\ndependency, such as React or Lodash. If you set up externals\nas described above, your rollup will bundle <em>all</em> imports:</p>\n<pre><code><span class=\"hljs-keyword\">import</span> answer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'the-answer'</span>;\n<span class=\"hljs-keyword\">import</span> _ <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'lodash'</span>;\n</code></pre>\n<p>You can finely tune which imports are bundled and which\nare treated as external. For this example, we&#39;ll treat\n<code>lodash</code> as external, but not <code>the-answer</code>.</p>\n<p>Here is the config file:</p>\n<pre><code><span class=\"hljs-comment\">// rollup.config.js</span>\n<span class=\"hljs-keyword\">import</span> resolve <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rollup-plugin-node-resolve'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">'src/main.js'</span>,\n  <span class=\"hljs-attr\">format</span>: <span class=\"hljs-string\">'cjs'</span>,\n  <span class=\"hljs-attr\">plugins</span>: [resolve({\n    <span class=\"hljs-comment\">// pass custom options to the resolve plugin</span>\n    customResolveOptions: {\n      <span class=\"hljs-attr\">moduleDirectory</span>: <span class=\"hljs-string\">'node_modules'</span>\n    }\n  })],\n  <span class=\"hljs-comment\">// indicate which modules should be treated as external</span>\n  external: [<span class=\"hljs-string\">'lodash'</span>],\n  <span class=\"hljs-attr\">dest</span>: <span class=\"hljs-string\">'bundle.js'</span>\n};\n</code></pre>\n<p>Voila, <code>lodash</code> will now be treated as external, and\nnot be bundled with your library.</p>\n<p>The <code>external</code> key accepts either an array of module names\nor a function which takes the module name and returns true\nif it should be treated as external. For example:</p>\n<pre><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-comment\">// ...</span>\n  external: <span class=\"hljs-function\"><span class=\"hljs-params\">id</span> =&gt;</span> /lodash/.test(id)\n}\n</code></pre>\n<p>You might use this form if you&#39;re using\n<a href=\"https://github.com/lodash/babel-plugin-lodash\">babel-plugin-lodash</a> \nto cherry-pick lodash modules. In this case, Babel will\nconvert your import statements to look like this:</p>\n<pre><code><span class=\"hljs-keyword\">import</span> _merge <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'lodash/merge'</span>;\n</code></pre>\n<p>The array form of <code>external</code> does not handle wildcards, so\nthis import will only be treated as external in the functional\nform.</p>\n","metadata":{"title":"Using Rollup with npm packages"},"subsections":[{"slug":"rollup-plugin-node-resolve","title":"rollup-plugin-node-resolve"},{"slug":"rollup-plugin-commonjs","title":"rollup-plugin-commonjs"}],"slug":"using-rollup-with-npm"},{"html":"<p>Many developers use <a href=\"https://babeljs.io/\">Babel</a> in their projects, so that they can use futuristic JavaScript features that aren&#39;t yet supported by browsers and Node.js.</p>\n<p>The easiest way to use both Babel and Rollup is with <a href=\"https://github.com/rollup/rollup-plugin-babel\">rollup-plugin-babel</a>. Install it:</p>\n<pre><code>npm i -D rollup-plugin-babel\n</code></pre>\n<p>Add it to <code>rollup.config.js</code>:</p>\n<pre><code><span class=\"hljs-comment\">// rollup.config.js</span>\n<span class=\"hljs-keyword\">import</span> resolve <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rollup-plugin-node-resolve'</span>;\n<span class=\"hljs-keyword\">import</span> babel <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rollup-plugin-babel'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">'src/main.js'</span>,\n  <span class=\"hljs-attr\">format</span>: <span class=\"hljs-string\">'cjs'</span>,\n  <span class=\"hljs-attr\">plugins</span>: [\n    resolve(),\n    babel({\n      <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-string\">'node_modules/**'</span> <span class=\"hljs-comment\">// only transpile our source code</span>\n    })\n  ],\n  <span class=\"hljs-attr\">dest</span>: <span class=\"hljs-string\">'bundle.js'</span>\n};\n</code></pre>\n<p>Before Babel will actually compile your code, it needs to be configured. Create a new file, <code>src/.babelrc</code>:</p>\n<pre><code>{\n  <span class=\"hljs-string\">\"presets\"</span>: [\n    [<span class=\"hljs-string\">\"latest\"</span>, {\n      <span class=\"hljs-string\">\"es2015\"</span>: {\n        <span class=\"hljs-string\">\"modules\"</span>: <span class=\"hljs-literal\">false</span>\n      }\n    }]\n  ],\n  <span class=\"hljs-string\">\"plugins\"</span>: [<span class=\"hljs-string\">\"external-helpers\"</span>]\n}\n</code></pre>\n<p>There are a few unusual things about this setup. First, we&#39;re setting <code>&quot;modules&quot;: false</code>, otherwise Babel will convert our modules to CommonJS before Rollup gets a chance to do its thing, causing it to fail.</p>\n<p>Secondly, we&#39;re using the <code>external-helpers</code> plugin, which allows Rollup to include any &#39;helpers&#39; just once at the top of the bundle, rather than including them in every module that uses them (which is the default behaviour).</p>\n<p>Thirdly, we&#39;re putting our <code>.babelrc</code> file in <code>src</code>, rather than the project root. This allows us to have a different <code>.babelrc</code> for things like tests, if we need that later – it&#39;s generally a good idea to have separate configuration for separate tasks.</p>\n<p>Now, before we run rollup, we need to install the <code>latest</code> preset and the <code>external-helpers</code> plugin:</p>\n<pre><code>npm i -D babel-preset-latest babel-plugin-external-helpers\n</code></pre>\n<p>Running Rollup now will create a bundle... except we&#39;re not actually using any ES2015 features. Let&#39;s change that. Edit <code>src/main.js</code>:</p>\n<pre><code><span class=\"hljs-comment\">// src/main.js</span>\n<span class=\"hljs-keyword\">import</span> answer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'the-answer'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`the answer is <span class=\"hljs-subst\">${answer}</span>`</span>);\n}\n</code></pre>\n<p>Run Rollup with <code>npm run build</code>, and check the bundle:</p>\n<pre><code><span class=\"hljs-meta\">'use strict'</span>;\n\n<span class=\"hljs-keyword\">var</span> index = <span class=\"hljs-number\">42</span>;\n\n<span class=\"hljs-keyword\">var</span> main = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'the answer is '</span> + index);\n});\n\n<span class=\"hljs-built_in\">module</span>.exports = main;\n</code></pre>\n","metadata":{"title":"Using Rollup with Babel"},"subsections":[],"slug":"using-rollup-with-babel"},{"html":"<p>Sourcemaps can be enabled by adding the <code>--sourcemap</code> flag using the CLI, or by adding <code>sourceMap: true</code> to your configuration file.</p>\n<pre><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">'src/main.js'</span>,\n  <span class=\"hljs-attr\">format</span>: <span class=\"hljs-string\">'umd'</span>,\n  <span class=\"hljs-attr\">dest</span>: <span class=\"hljs-string\">'bundle.js'</span>,\n  <span class=\"hljs-attr\">sourceMap</span>: <span class=\"hljs-literal\">true</span>\n};\n</code></pre>\n","metadata":{"title":"Sourcemaps"},"subsections":[],"slug":"sourcemaps"},{"html":"<h3 id=\"what-is-tree-shaking-\">What is &#39;tree-shaking&#39;?</h3>\n<p>Tree-shaking a.k.a. &#39;live code inclusion&#39; is the process of only including the code that is used.  It is similar to dead code elimination but can be more efficient. Read more about the origin of the name: <a href=\"https://medium.com/@Rich_Harris/tree-shaking-versus-dead-code-elimination-d3765df85c80#.jnypozs9n\">Tree-shaking vs Dead-Code Elimination</a></p>\n<h3 id=\"why-are-es2015-modules-better-than-amd-and-commonjs-\">Why are ES2015 modules better than AMD and CommonJS?</h3>\n<p>ES2015 modules are an official standard that will be arriving soon to browsers and Node.js. They allow static analysis that enables optimizations like tree-shaking, and have advanced features like circular references and live bindings. </p>\n<h3 id=\"who-made-the-rollup-logo-it-s-lovely-\">Who made the Rollup logo? It&#39;s lovely.</h3>\n<p>I know! It was made by <a href=\"https://twitter.com/jlmakes\">Julian Lloyd.</a></p>\n","metadata":{"title":"Frequently asked questions"},"subsections":[{"slug":"what-is-tree-shaking-","title":"What is &#39;tree-shaking&#39;?"},{"slug":"why-are-es2015-modules-better-than-amd-and-commonjs-","title":"Why are ES2015 modules better than AMD and CommonJS?"},{"slug":"who-made-the-rollup-logo-it-s-lovely-","title":"Who made the Rollup logo? It&#39;s lovely."}],"slug":"faqs"},{"html":"<p>coming soon...</p>\n","metadata":{"title":"Comparison with other tools"},"subsections":[],"slug":"comparison"},{"html":"<p>Rollup returns promises which are understood by gulp so integration is easy.</p>\n<p>The syntax is very similar to the configuration file, but the properties are split across two different operations. Constructing the bundle, and transpiling to a target output.</p>\n<pre><code><span class=\"hljs-keyword\">var</span> gulp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'gulp'</span>),\n  rollup = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'rollup'</span>),\n  rollupTypescript = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'rollup-plugin-typescript'</span>)\n;\n\ngulp.task(<span class=\"hljs-string\">'build'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> rollup.rollup({\n    <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">\"./src/main.ts\"</span>,\n    <span class=\"hljs-attr\">plugins</span>: [\n      rollupTypescript()\n    ],\n  })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">bundle</span>) </span>{\n      bundle.write({\n        <span class=\"hljs-attr\">format</span>: <span class=\"hljs-string\">\"umd\"</span>,\n        <span class=\"hljs-attr\">moduleName</span>: <span class=\"hljs-string\">\"library\"</span>,\n        <span class=\"hljs-attr\">dest</span>: <span class=\"hljs-string\">\"./dist/library.js\"</span>,\n        <span class=\"hljs-attr\">sourceMap</span>: <span class=\"hljs-literal\">true</span>\n      });\n    })\n});\n</code></pre>\n","metadata":{"title":"Using RollupJS with Gulp"},"subsections":[],"slug":"using-rollup-with-gulp"}]